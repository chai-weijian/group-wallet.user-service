
spring.cloud.stream.bindings:
  createUser-in-0:
    destination: groupwallet.userservice.CreateUser-requests
  createUser-in-1:
    destination: groupwallet.userservice.resetPreviouslySeenUid
  createUser-in-2:
    destination: groupwallet.userservice.resetPreviouslySeenUserId
  createUser-out-0:
    destination: groupwallet.userservice.CreateUser-responses
  updateUser-in-0:
    destination: groupwallet.userservice.UpdateUser-requests
  updateUser-in-1:
    destination: groupwallet.userservice.UserAggregate-stream
  updateUser-out-0:
    destination: groupwallet.userservice.UpdateUser-responses
  aggregateUser-in-0:
    destination: groupwallet.userservice.UserCreated-events
  aggregateUser-in-1:
    destination: groupwallet.userservice.UserUpdated-events
  aggregateUser-out-0:
    destination: groupwallet.userservice.UserAggregate-stream
  mapUidToName-in-0:
    destination: groupwallet.userservice.UserCreated-events

spring.cloud.stream.kafka.streams.binder.functions:
  createUser:
    application-id: groupwallet.userservice.createUser-app
  aggregateUser:
    application-id: groupwallet.userservice.aggregateUser-app
  mapUidToName:
    application-id: groupwallet.userservice.mapUidToName-app
  updateUser:
    application-id: groupwallet.userservice.updateUser-app

spring.cloud.stream.kafka.streams.binder:
  configuration:
    schema.registry.url: http://localhost:8081
    commit.interval.ms: 0

spring:
  cloud:
    function:
      definition: createUser;aggregateUser;mapUidToName;updateUser
  kafka:
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.protobuf.KafkaProtobufSerializer
    consumer:
      value-deserializer: io.confluent.kafka.serializers.protobuf.KafkaProtobufDeserializer
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    properties:
      schema.registry.url: http://localhost:8081

grpc.server.port: 8091